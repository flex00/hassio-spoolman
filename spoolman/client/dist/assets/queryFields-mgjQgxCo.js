import{x as l,z as u,A as f,w as t}from"./index-DVifsFYV.js";var c=(e=>(e.text="text",e.integer="integer",e.integer_range="integer_range",e.float="float",e.float_range="float_range",e.datetime="datetime",e.boolean="boolean",e.choice="choice",e))(c||{}),d=(e=>(e.vendor="vendor",e.filament="filament",e.spool="spool",e))(d||{});function m(e){return l({queryKey:["fields",e],queryFn:async()=>(await fetch(`${t()}/field/${e}`)).json()})}function w(e){const a=u();return f({mutationFn:async({key:n,params:s})=>{const r=await fetch(`${t()}/field/${e}/${n}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(!r.ok)throw new Error((await r.json()).message);return r.json()},onMutate:async({key:n,params:s})=>{await a.cancelQueries(["fields",e]);const r=a.getQueryData(["fields",e]);return a.setQueryData(["fields",e],i=>i?i.map(o=>o.key===n?{...o,...s}:o):[{key:n,entity_type:e,...s}]),{previousFields:r}},onError:(n,s,r)=>{r!=null&&r.previousFields&&a.setQueryData(["fields",e],r.previousFields)},onSettled:()=>{a.invalidateQueries(["fields",e])}})}function h(e){const a=u();return f({mutationFn:async n=>{const s=await fetch(`${t()}/field/${e}/${n}`,{method:"DELETE"});if(!s.ok)throw new Error((await s.json()).message);return s.json()},onSuccess:()=>{a.invalidateQueries(["fields",e])}})}export{d as E,c as F,w as a,h as b,m as u};
